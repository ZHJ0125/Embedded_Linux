zhj@thinkpad-vmware:~$ pwd
/home/zhj
zhj@thinkpad-vmware:~$ cd Linux/homework/lesson4/lesson4_2/
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ man cat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
lesson4_2.c: In function ‘main’:
lesson4_2.c:9:5: error: ‘argc’ undeclared (first use in this function); did you mean ‘argv’?
  if(argc < 2)
     ^~~~
     argv
lesson4_2.c:9:5: note: each undeclared identifier is reported only once for each function it appears in
lesson4_2.c:17:10: warning: implicit declaration of function ‘open’; did you mean ‘popen’? [-Wimplicit-function-declaration]
   if((fd=open(*(argv+1),O_RDONLY)) == -1)
          ^~~~
          popen
lesson4_2.c:17:25: error: ‘O_RDONLY’ undeclared (first use in this function)
   if((fd=open(*(argv+1),O_RDONLY)) == -1)
                         ^~~~~~~~
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
lesson4_2.c: In function ‘main’:
lesson4_2.c:12:5: error: ‘argc’ undeclared (first use in this function); did you mean ‘argv’?
  if(argc < 2)
     ^~~~
     argv
lesson4_2.c:12:5: note: each undeclared identifier is reported only once for each function it appears in
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
Please input target file: Success
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test �file
The GNU Core Ut�ilities are the basi�c file, shell and te�xt manipulation util�ities of the GNU ope�rating system.
These� are the core utilit�ies which are expect�ed to exist on every� operating system.
y�zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
Please input target file
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test �file
The GNU Core Ut�ilities are the basi�c file, shell and te�xt manipulation util�ities of the GNU ope�rating system.
These� are the core utilit�ies which are expect�ed to exist on every� operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test �file
The GNU Core Ut�ilities are the basi�c file, shell and te�xt manipulation util�ities of the GNU ope�rating system.
These� are the core utilit�ies which are expect�ed to exist on every� operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 lesson4_2.c 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read file contents to stdout
	if(argc == 2){
		// Open target file
		if((fd=open(*(argv+1),O_RDONLY)) == -1){
			perror("Fail to Open file");
			return -2;
		}
		// Read file
		while(read(fd,buf,BUFSIZE-1) > 0){
			printf("%s",buf);
			memset(buf,0,BUFSIZE);
		}
	}
	return 0;
}
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 lesson4_2.c > temp.c
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat temp.c 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read file contents to stdout
	if(argc == 2){
		// Open target file
		if((fd=open(*(argv+1),O_RDONLY)) == -1){
			perror("Fail to Open file");
			return -2;
		}
		// Read file
		while(read(fd,buf,BUFSIZE-1) > 0){
			printf("%s",buf);
			memset(buf,0,BUFSIZE);
		}
	}
	return 0;
}
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  temp.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ echo "*****This is my test for "cat" function*****"
*****This is my test for cat function*****
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat lesson4_2 lesson4_2.c temp.c test > hello
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
hello  lesson4_2  lesson4_2.c  temp.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi hello 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat hello 
ELF>@@@8	@@@@��8880
                                        0
 xx/lib64/ld-linux-x86-64.so.2GNUGNUȈ�R�td� >^�MWt�v~�P�w (/6O� ;
                                                                                            � @"libc.so.6perrorputs__stack_chk_failprintfmemset � � � � finalize__libc_start_mainGLIBC_2.4GLIBC_2.2.5_ITM_deregisterTMCloneTable__gmon_start___ITM_registerTMCloneTableii
              � 
                 � � � � � � 	� 
H�H�}	 H��t��H���5
	 �%
           	 @�%
]��f.�]�@f.�H�= H�5 UH)�H��H��H��H��?H�H��tH� H��t������% h������% h������% f�1�I��^H��H���PTL�jH�
                                                        ]��f�]�@f.��= u/H�= UH��t
����H���� ]����fDUH��]�f���UH��H��@�}�H�u�dH�%(H�E�1���f�E�H�E�H�E�f�E��}�H�=>�%�����������}���H�E�H�H��H�Ǹ�D����E܃}��uAH�=�?���������NH�E�H��H�=	������H�E���H�������H�M��EܺH�Ή������H����H�U�dH3%(t�������@AWAVI��AUATL�%V UH�-V SA��I��L)�H�H������H��t 1��L��L��D��A��H��H9�u�H�[]A\A]A^A_Ðf.���H�H��Please input target fileFail to Open file%s;<���������(���X2����8��������0zRx
             �����+zRx
                               �$����FJ
�      �?;*3$"D`��\b���A�C
  D|H���eB�B�E �B(�H0�H8�M@r8A0A(B BB�p����
 ���o���                                           `
�
 ������� GCC: (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.08Tt�����	�
�
  `
� ��	�	(
 �   ��
 ������,       @�!�7 F�
 ���   ���� �  4F �	Mi}��� � � ��	� 	e� �+
 -A M g"
                                  `crtstuff.cderegister_tm_clones__do_global_dtors_auxcompleted.7697__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrylesson4_2.c__FRAME_END____init_array_end_DYNAMIC__init_array_start__GNU_EH_FRAME_HDR_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTableputs@@GLIBC_2.2.5_edata__stack_chk_fail@@GLIBC_2.4printf@@GLIBC_2.2.5memset@@GLIBC_2.2.5read@@GLIBC_2.2.5__libc_start_main@@GLIBC_2.2.5__data_start__gmon_start____dso_handle_IO_stdin_used__libc_csu_init__bss_startmainopen@@GLIBC_2.2.5perror@@GLIBC_2.2.5__TMC_END___ITM_registerTMCloneTable__cxa_finalize@@GLIBC_2.2.5.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rela.dyn.rela.plt.init.plt.got.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.dynamic.data.bss.comment88#TT 1tt$D���o��N
                                          ��8V���^���o��k���o��0z���B����``��������	�	��	�	F��	�	<�(
(
��� �  �0+@x	��;�#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read file contents to stdout
	if(argc == 2){
		// Open target file
		if((fd=open(*(argv+1),O_RDONLY)) == -1){
			perror("Fail to Open file");
			return -2;
		}
		// Read file
		while(read(fd,buf,BUFSIZE-1) > 0){
			printf("%s",buf);
			memset(buf,0,BUFSIZE);
		}
	}
	return 0;
}
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read file contents to stdout
	if(argc == 2){
		// Open target file
		if((fd=open(*(argv+1),O_RDONLY)) == -1){
			perror("Fail to Open file");
			return -2;
		}
		// Read file
		while(read(fd,buf,BUFSIZE-1) > 0){
			printf("%s",buf);
			memset(buf,0,BUFSIZE);
		}
	}
	return 0;
}
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ echo "******** Test results show that "cat" will output files to standard output one by one *********"
******** Test results show that cat will output files to standard output one by one *********
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
hello  lesson4_2  lesson4_2.c  temp.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ rm hello temp.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
lesson4_2.c: In function ‘main’:
lesson4_2.c:20:7: error: ‘i’ undeclared (first use in this function)
   for(i=1; i<=argc; i++){
       ^
lesson4_2.c:20:7: note: each undeclared identifier is reported only once for each function it appears in
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat lesson4_2.c 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int num;
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read data from file and display to stdout
	if(argc >= 2){
		// Open every file one by one
		for(num=1; num<=argc; num++){
			// Open target file
			if((fd=open(*(argv+num),O_RDONLY)) == -1){
				perror("Fail to Open file");
				return -2;
			}
			// Read file
			while(read(fd,buf,BUFSIZE-1) > 0){
				printf("%s",buf);
				memset(buf,0,BUFSIZE);
			}
		}
	}
	return 0;
}
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
Please input target file
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
Fail to Open file: Bad address
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sed -n 21p lesson4_2.c 
		for(num=1; num<argc; num++){
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 lesson4_2.c test > temp
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat temp 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int num;
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		printf("Please input target file\n");
		return -1;
	}
	// Read data from file and display to stdout
	if(argc >= 2){
		// Open every file one by one
		for(num=1; num<argc; num++){
			// Open target file
			if((fd=open(*(argv+num),O_RDONLY)) == -1){
				perror("Fail to Open file");
				return -2;
			}
			// Read file
			while(read(fd,buf,BUFSIZE-1) > 0){
				printf("%s",buf);
				memset(buf,0,BUFSIZE);
			}
		}
	}
	return 0;
}
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  temp  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ echo "****** Next I will test the case without parameters ******"
****** Next I will test the case without parameters ******
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat
This is the case without parameters  
This is the case without parameters
That's also works!        
That's also works!
ok
ok
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
lesson4_2.c: In function ‘main’:
lesson4_2.c:19:14: warning: passing argument 1 of ‘read’ makes integer from pointer without a cast [-Wint-conversion]
   while(read(stdin,buf,BUFSIZE-1) > 0){
              ^~~~~
In file included from lesson4_2.c:1:0:
/usr/include/unistd.h:363:16: note: expected ‘int’ but argument is of type ‘struct _IO_FILE *’
 extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __wur;
                ^~~~
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
lesson4_2.c: In function ‘main’:
lesson4_2.c:19:14: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]
   while(read((int)stdin,buf,BUFSIZE-1) > 0){
              ^
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat lesson4_2.c 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int num;
	int fd;
	char buf[BUFSIZE]="\0";
	// Not enough parameters 
	if(argc < 2){
		// In this case, the input stream is standard input(stdin)
		// and the output stream is standard output(stdout)
		// printf("Please input target file\n");
		// return -1;
		while(!fgets(buf,BUFSIZE-1,stdin)){
			fputs(buf,stdout);
			memset(buf,0,BUFSIZE);
		}
	}
	// Read data from file and display to stdout
	if(argc >= 2){
		// Open every file one by one
		for(num=1; num<argc; num++){
			// Open target file
			if((fd=open(*(argv+num),O_RDONLY)) == -1){
				perror("Fail to Open file");
				return -2;
			}
			// Read file
			while(read(fd,buf,BUFSIZE-1) > 0){
				printf("%s",buf);
				memset(buf,0,BUFSIZE);
			}
		}
	}
	return 0;
}
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  temp  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
this is in "no parameter" case.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
this is in "no parameter" case
hello
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
test
test
ddd
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
ddsd
ddsd

dfdfdd
dfdfdd

^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
zhanghoujin
zhanghoujin
teset
teset
ok
ok
nice
nice
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  temp  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ rm temp 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat
hello
hello
zhanghoujin
zhanghoujin
123
123
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 
hello
hello
zhanghoujin
zhanghoujin
123
123
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat lesson4_2.c test > from_cat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 lesson4_2.c test > from_lesson
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat from_cat 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int num;
	int fd;
	char buf[BUFSIZE]="\0";
	// Only one command, no parameters
	if(argc < 2){
		// In this case, the input stream is standard input(stdin)
		// and the output stream is standard output(stdout)
		while(1)
		while(fgets(buf,BUFSIZE-1,stdin)!=NULL){
			fputs(buf,stdout);
			memset(buf,0,BUFSIZE);
		}
	}
	// Two or more parameters
	// Read data from file and display to stdout
	else{
		// Open all files one by one
		for(num=1; num<argc; num++){
			// Open target file
			if((fd=open(*(argv+num),O_RDONLY)) == -1){
				perror("Fail to Open file");
				return -1;
			}
			// Read file
			while(read(fd,buf,BUFSIZE-1) > 0){
				printf("%s",buf);
				memset(buf,0,BUFSIZE);
			}
			// Close file
			close(fd);
		}
	}
	return 0;
}
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat from_lesson 
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#define BUFSIZE 20

int main(int argc, char* argv[]){
	int num;
	int fd;
	char buf[BUFSIZE]="\0";
	// Only one command, no parameters
	if(argc < 2){
		// In this case, the input stream is standard input(stdin)
		// and the output stream is standard output(stdout)
		while(1)
		while(fgets(buf,BUFSIZE-1,stdin)!=NULL){
			fputs(buf,stdout);
			memset(buf,0,BUFSIZE);
		}
	}
	// Two or more parameters
	// Read data from file and display to stdout
	else{
		// Open all files one by one
		for(num=1; num<argc; num++){
			// Open target file
			if((fd=open(*(argv+num),O_RDONLY)) == -1){
				perror("Fail to Open file");
				return -1;
			}
			// Read file
			while(read(fd,buf,BUFSIZE-1) > 0){
				printf("%s",buf);
				memset(buf,0,BUFSIZE);
			}
			// Close file
			close(fd);
		}
	}
	return 0;
}
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat > test_cat
this is a "no parameter" test
OK, let's check "test_cat"
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat test_cat 
this is a "no parameter" test
OK, let's check "test_cat"
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 > test_lesson
this is a "no parameter" test
OK, let's check "test_lesson"
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat test_lesson 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi test_lesson 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ./lesson4_2 > test_lesson
this is a "no parameter" test
Go to check
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cat test_lesson 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
from_cat  from_lesson  lesson4_2  lesson4_2.c  test  test_cat  test_lesson
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ rm from* test_*
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi /etc/vim/vimrc
'zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo vi /etc/vim/vimrc
[sudo] password for zhj: 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi /etc/vim/vimrc
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo vi /etc/vim/vimrc
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ vi lesson4_2.c 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ gcc lesson4_2.c -o lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ l
Display all 118 possibilities? (y or n)
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ which cat
/bin/cat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ which ls
/bin/ls
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo ln -s ./lesson4_2 /bin/mycat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ which mycat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls /bin/*cat
/bin/bzcat  /bin/cat  /bin/mycat  /bin/netcat  /bin/ntfscat  /bin/zcat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls -l /bin/*cat
-rwxr-xr-x 1 root root 34888 Jul  4  2019 /bin/bzcat
-rwxr-xr-x 1 root root 35064 Jan 18  2018 /bin/cat
lrwxrwxrwx 1 root root    11 Feb 21 09:31 /bin/mycat -> ./lesson4_2
lrwxrwxrwx 1 root root    24 Oct 26 22:19 /bin/netcat -> /etc/alternatives/netcat
-rwxr-xr-x 1 root root 26728 Mar 22  2019 /bin/ntfscat
-rwxr-xr-x 1 root root  1937 Apr 28  2017 /bin/zcat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo ln -s /home/zhj/Linux/homework/lesson4/lesson4_2/lesson4_2 /bin/mycat
ln: failed to create symbolic link '/bin/mycat': File exists
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo rm /bin/mycat 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ sudo ln -s /home/zhj/Linux/homework/lesson4/lesson4_2/lesson4_2 /bin/mycat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls -l /bin/*cat
-rwxr-xr-x 1 root root 34888 Jul  4  2019 /bin/bzcat
-rwxr-xr-x 1 root root 35064 Jan 18  2018 /bin/cat
lrwxrwxrwx 1 root root    52 Feb 21 09:34 /bin/mycat -> /home/zhj/Linux/homework/lesson4/lesson4_2/lesson4_2
lrwxrwxrwx 1 root root    24 Oct 26 22:19 /bin/netcat -> /etc/alternatives/netcat
-rwxr-xr-x 1 root root 26728 Mar 22  2019 /bin/ntfscat
-rwxr-xr-x 1 root root  1937 Apr 28  2017 /bin/zcat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ which mycat
/bin/mycat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ ls
lesson4_2  lesson4_2.c  test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ mycat test 
This is just a test file
The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system.
These are the core utilities which are expected to exist on every operating system.
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ rm test 
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ mkdir test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2$ cd test/
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ echo "Hello,here is test1" > test1
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ echo "Hello,here is test2" > test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls
test1  test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat test1 test2 > test
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat test
Hello,here is test1
Hello,here is test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat 
this is a "no parameter" test
this is a "no parameter" test
test over
test over
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls
test  test1  test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ rm ./*
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ echo "Hello,here is test1" > test1
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ echo "Hello,here is test2" > test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls 
test1  test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat test1 
Hello,here is test1
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ cat test2 
Hello,here is test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat test1 test2 > from_mycat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ cat test1 test2 > from_cat
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls
from_cat  from_mycat  test1  test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ cat from_cat 
Hello,here is test1
Hello,here is test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ca
cal                caller             capsh              cat                cautious-launcher
calendar           canberra-gtk-play  captoinfo          catchsegv          
calibrate_ppa      cancel             case               catman             
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ cat from_mycat 
Hello,here is test1
Hello,here is test2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ ls -l /bin/mycat 
lrwxrwxrwx 1 root root 52 Feb 21 09:34 /bin/mycat -> /home/zhj/Linux/homework/lesson4/lesson4_2/lesson4_2
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ cat
this is a "no parameter" test
this is a "no parameter" test
In this case,input stream is stdin,output stream is stdout
In this case,input stream is stdin,output stream is stdout
test over
test over
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ mycat 
this is a "no parameter" test
this is a "no parameter" test
In this case,input stream is stdin,output stream is stdout
In this case,input stream is stdin,output stream is stdout
test over
test over
^C
zhj@thinkpad-vmware:~/Linux/homework/lesson4/lesson4_2/test$ date
Fri Feb 21 09:52:06 CST 2020
